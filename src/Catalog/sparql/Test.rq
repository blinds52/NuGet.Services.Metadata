
PREFIX nuget: <http://schema.nuget.org/schema#>
PREFIX catalog: <http://schema.nuget.org/catalog#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?rangePackages
WHERE 
{ 
    ?rangePackages a nuget:RangePackages ;
                    nuget:package ?package .

    ?package a nuget:Package ;
             nuget:registration ?registration ;
             nuget:version ?version ;
             nuget:info ?package_info ;
             nuget:nupkgUrl ?nupkgUrl ;
             catalog:commitId ?commitId ;
             catalog:commitTimestamp ?timeStamp .

    OPTIONAL { ?package nuget:dependencyGroup ?dependency_group . }
    OPTIONAL { ?package nuget:frameworkAssemblyGroup ?framework_assembly_group . }
    OPTIONAL { ?package nuget:minClientVersion ?minClientVersion . }

    ?package_info a nuget:PackageInfo .

    OPTIONAL { ?package_info nuget:authors ?authors . }
    OPTIONAL { ?package_info nuget:description ?description . }
    OPTIONAL { ?package_info nuget:requireLicenseAcceptance ?requireLicenseAcceptance . }
    OPTIONAL { ?package_info nuget:licenseUrl ?licenseUrl . }
    OPTIONAL { ?package_info nuget:licenseName ?licenseName . }
    OPTIONAL { ?package_info nuget:iconUrl ?iconUrl . }
    OPTIONAL { ?package_info nuget:downloadCount ?downloadCount . }
    OPTIONAL { ?package_info nuget:galleryDetailsUrl ?galleryDetailsUrl . }
    OPTIONAL { ?package_info nuget:reportAbuseUrl ?reportAbuseUrl . }
    OPTIONAL { ?package_info nuget:published ?published . }
    OPTIONAL { ?package_info nuget:tag ?tag . }
    OPTIONAL { ?package_info nuget:packageTargetFramework ?targetFramework . }
    OPTIONAL { ?package_info nuget:releaseNotes ?releaseNotes . }
    OPTIONAL { ?package_info nuget:title ?title . }
    OPTIONAL { ?package_info nuget:projectUrl ?projectUrl . }
    OPTIONAL { ?package_info nuget:copyright ?copyright . }
    OPTIONAL { ?package_info nuget:developmentDependency ?developmentDependency . }

    BIND(STRBEFORE(STR(?rangePackages), "#") AS ?rangePackagesPathStr)
    BIND(STRAFTER(STR(?rangePackages), "#") AS ?rangePackagesFragmentStr)
    BIND(SUBSTR(?rangePackagesPathStr, 0, STRLEN(?rangePackagesPathStr) - 5) AS ?baseRangePackagesPathStr)

    BIND(IRI(CONCAT(?baseRangePackagesPathStr, "/", ?rangePackagesFragmentStr, ?extension)) AS ?resource)
    BIND(IRI(CONCAT(STR(?resource), "#", STRAFTER(STR(?package), "#"))) AS ?resource_package)
    BIND(IRI(CONCAT(STR(?resource_package), "/info")) AS ?resource_package_info)

    BIND(IRI(CONCAT(STR(?resource), "#", STRAFTER(STR(?dependency_group), "#"))) AS ?resource_dependency_group)

    OPTIONAL
    {
        ?package nuget:dependencyGroup ?dependency_group .
        ?dependency_group nuget:dependency ?dependency .

        OPTIONAL { ?dependency_group nuget:targetFramework ?dependency_group_targetFramework . }
        OPTIONAL { ?dependency_group nuget:name ?dependency_group_name . }
        
        ?dependency nuget:id ?dependency_id ;
                    nuget:registration ?dependency_registration .
       
        OPTIONAL { ?dependency nuget:range ?dependency_version . }
    }

    BIND(IRI(CONCAT(STR(?resource), "#", STRAFTER(STR(?framework_assembly_group), "#"))) AS ?resource_framework_assembly_group)

    OPTIONAL
    {
        ?package nuget:dependencyGroup ?framework_assembly_group .
        ?framework_assembly_group nuget:assembly ?assembly .

        OPTIONAL { ?framework_assembly_group nuget:targetFramework ?framework_assembly_group_targetFramework . }
    }
}
